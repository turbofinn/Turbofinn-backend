package org.turbofinn.dbmappers;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.google.gson.Gson;
import lombok.*;
import org.turbofinn.aws.AWSCredentials;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@DynamoDBTable(tableName = "Restaurant")
public class DB_Restaurant extends DB_DateTable{

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    String restaurantId;
    String name;
    String flatHouseNumber;
    String street;
    String landmark;
    String city;
    String state;
    String pincode;
    String emailId;
    String contactNo;
    String restaurantAccountNo;

    public static enum ActionType {
        CREATE("CREATE"),
        UPDATE("UPDATE");
        private String text;

        private ActionType(String text) {
            this.text = text;
        }

        @Override
        public String toString() {
            return this.text;
        }

        public static DB_Restaurant.ActionType getActionType(String type) {
            if (type == null) {
                return null;
            }
            switch (type) {
                case "CREATE":
                    return DB_Restaurant.ActionType.CREATE;
                case "UPDATE":
                    return DB_Restaurant.ActionType.UPDATE;
                default:
                    return null;
            }
        }
    }

    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** Restaurant Saved *** " + new Gson().toJson(this));
    }

    public static DB_Restaurant fetchRestaurantByID(String restaurantId){
        return (restaurantId == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_Restaurant.class, restaurantId);
    }
}
