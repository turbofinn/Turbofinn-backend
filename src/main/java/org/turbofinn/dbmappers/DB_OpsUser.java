package org.turbofinn.dbmappers;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.google.gson.Gson;
import lombok.*;
import org.turbofinn.aws.AWSCredentials;

import java.util.ArrayList;
import java.util.HashMap;
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@DynamoDBTable(tableName = "OpsUser")
public class DB_OpsUser extends DB_DateTable{

    public static void main(String[] args) {
//        DB_OpsUser dbUser = new DB_OpsUser();
//        dbUser.setName("Divyanshi");
//        dbUser.setEmail("div@gmail.com");
//        dbUser.setMobileNo("67687776758");
//        dbUser.setDob("2024-01-01");
//        dbUser.setProfilePicture("sdfgfb.jpeg");
//        dbUser.setGender("Female");
//        dbUser.setRestaurantID("04d68d60-4887-4b52-839d-3f2b2a9d4f8a");
//        dbUser.setDesignation("Pilot");
//        dbUser.save();

//        ArrayList<DB_OpsUser> dbOpsUser = DB_OpsUser.fetchUserByRestaurantIdAndDesignation("04d68d60-4887-4b52-839d-3f2b2a9d4f8a","Pilot");
//        PaginatedQueryList<DB_OpsUser> dbOpsUser = DB_OpsUser.fetchUserByRestaurantIdAndDesignation("04d68d60-4887-4b52-839d-3f2b2a9d4f8a");
//        System.out.println(new Gson().toJson(dbOpsUser));
    }

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    String opsID;
    String name;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "mobileNo-index")
    String mobileNo;
    String email;
    String gender;
    String dob;
    String profilePicture;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "restaurantID-index", attributeName = "restaurantID")
    String restaurantID;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "restaurantID-designation-index", attributeName = "designation")
    String designation;


    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** User Saved *** " + new Gson().toJson(this));
    }

    public static DB_User fetchOpsUserByOpsID(String opsID){
        return (opsID == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_User.class, opsID);

    }

    public static DB_OpsUser fetchOpsUserByMobileNo(String mobileNo) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":mobileNo", new AttributeValue().withS(mobileNo));
        DynamoDBQueryExpression<DB_OpsUser> queryExpression = new DynamoDBQueryExpression<DB_OpsUser>()
                .withIndexName("mobileNo-index")
                .withKeyConditionExpression("mobileNo = :mobileNo")
                .withExpressionAttributeValues(expressionAttributeValues).withConsistentRead(false);
        PaginatedQueryList<DB_OpsUser> dbQueryList = AWSCredentials.dynamoDBMapper().query(DB_OpsUser.class,
                queryExpression);
        return (dbQueryList != null && dbQueryList.size() > 0) ? dbQueryList.get(0) : null;
    }

    public static PaginatedQueryList<DB_OpsUser> fetchAllUserOfARestaurant(String restaurantID) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantID", new AttributeValue().withS(restaurantID));
        DynamoDBQueryExpression<DB_OpsUser> queryExpression = new DynamoDBQueryExpression<DB_OpsUser>()
                .withIndexName("restaurantID-index")
                .withKeyConditionExpression("restaurantID = :restaurantID")
                .withExpressionAttributeValues(expressionAttributeValues).withConsistentRead(false);
        PaginatedQueryList<DB_OpsUser> dbQueryList = AWSCredentials.dynamoDBMapper().query(DB_OpsUser.class,
                queryExpression);
        return dbQueryList;
    }

    public static ArrayList<DB_OpsUser> fetchUserByRestaurantIdAndDesignation(String restaurantID, String designation) {
        ArrayList<DB_OpsUser> sortedList = new ArrayList<>();

        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<String, AttributeValue>();
        expressionAttributeValues.put(":restaurantID", new AttributeValue().withS(restaurantID));
        expressionAttributeValues.put(":designation", new AttributeValue().withS(designation));

        DynamoDBQueryExpression<DB_OpsUser> queryExpression = new DynamoDBQueryExpression<DB_OpsUser>()
                .withIndexName("restaurantID-designation-index")
                .withKeyConditionExpression("restaurantID = :restaurantID AND designation = :designation")
                .withExpressionAttributeValues(expressionAttributeValues)
                .withConsistentRead(false);
        PaginatedQueryList<DB_OpsUser> dbQueryList = AWSCredentials.dynamoDBMapper().query(DB_OpsUser.class, queryExpression);
        if(dbQueryList != null && !dbQueryList.isEmpty()) {
            sortedList.addAll(dbQueryList);
        }
        return sortedList;
    }
}
