package org.turbofinn.dbmappers;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.google.gson.Gson;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.turbofinn.aws.AWSCredentials;

import java.util.HashMap;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@DynamoDBTable(tableName = "Stock")
public class DB_Stock extends DB_DateTable {
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    String stockId;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "restaurantId-index")
    String restaurantId;
    String name;
    String quantity;
    String unit;

    public static enum ActionType{
        CREATE("CREATE"),
        UPDATE("UPDATE"),
        DELETE("DELETE"),
        FETCH("FETCH");
        private String text;

        private ActionType(String text){
            this.text = text;
        }

        @Override
        public String toString(){
            return this.text;
        }

        public static DB_Stock.ActionType getActionType(String type){
            if(type == null){
                return null;
            }
            switch (type){
                case "CREATE":
                    return DB_Stock.ActionType.CREATE;
                case "UPDATE":
                    return DB_Stock.ActionType.UPDATE;
                case "DELETE":
                    return DB_Stock.ActionType.DELETE;
                case "FETCH":
                    return DB_Stock.ActionType.FETCH;
                default:
                    return null;
            }
        }
    }

    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** Stock Saved ***" + new Gson().toJson(this));
    }

    public static DB_Stock fetchStockByID(String stockId){
        return (stockId == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_Stock.class, stockId);
    }

    public static List<DB_Stock> fetchStocksByRestaurantID(String restaurantId) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantId", new AttributeValue().withS(restaurantId));
        DynamoDBQueryExpression<DB_Stock> queryExpression = new DynamoDBQueryExpression<DB_Stock>()
                .withIndexName("restaurantId-index")
                .withKeyConditionExpression("restaurantId = :restaurantId")
                .withExpressionAttributeValues(expressionAttributeValues).withConsistentRead(false);
        return AWSCredentials.dynamoDBMapper().query(DB_Stock.class, queryExpression);
    }
}
