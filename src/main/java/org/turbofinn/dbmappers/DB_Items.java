package org.turbofinn.dbmappers;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.google.gson.Gson;
import lombok.*;
import org.turbofinn.aws.AWSCredentials;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@DynamoDBTable(tableName = "Items")
public class DB_Items extends DB_DateTable {

    @DynamoDBAutoGeneratedKey
    @DynamoDBHashKey
    String itemId;
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "restaurantId-index")
    String restaurantId;
    String name;

    String type;        //  food , beverage ,bakery
    String cuisine;     // Indian, chinese,japanese
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "category-index")
    String category;    // fastfood, chinese, biryani, pizza ,burger
    String flag;         // veg ,nonveg ,alcoholic,nonalcoholic
    @DynamoDBIndexHashKey(globalSecondaryIndexName = "tag-index")
    String tag;
    String description;
    Double price;
    String eta;
    String itemPicture;
    String isDeleted = "false";
    String currency;
    String isAvailable = "false";
    String discountActive = "false";
    String ingredientsAvailable = "false";
    public static void main(String[] args) {
        DB_Items item = new DB_Items();
        item.setRestaurantId("resto123");
        item.setName("Cheese Burger");
        item.setType("food");
        item.setCuisine("American");
        item.setCategory("fastfood");
        item.setFlag("veg");
        item.setTag("burger");
        item.setDescription("Delicious cheese burger with extra toppings");
        item.setPrice(149.99);
        item.setEta("15 mins");
        item.setItemPicture("https://example.com/cheeseburger.jpg");
        item.setCurrency("INR");
        item.setIsAvailable("true");

        // Save to DynamoDB
        item.save();

        // Fetch the same item (will only work if itemId is set & saved)
        DB_Items fetchedItem = DB_Items.fetchItemByID(item.getItemId());
        System.out.println("*** Fetched Item ***");
        System.out.println(new Gson().toJson(fetchedItem));
    }

    public static enum ActionType {
        CREATE("CREATE"),
        UPDATE("UPDATE"),
        DELETE("DELETE"),
        CRITERIA("CRITERIA"),
        BYID("BYID"),
        BYRESTAURANTID("BYRESTAURANTID");
        private String text;

        private ActionType(String text) {
            this.text = text;
        }

        @Override
        public String toString() {
            return this.text;
        }

        public static DB_Items.ActionType getActionType(String type) {
            if (type == null) {
                return null;
            }
            switch (type) {
                case "CREATE":
                    return DB_Items.ActionType.CREATE;
                case "UPDATE":
                    return DB_Items.ActionType.UPDATE;
                case "DELETE":
                    return DB_Items.ActionType.DELETE;
                case "CRITERIA":
                    return DB_Items.ActionType.CRITERIA;
                case "BYID":
                    return DB_Items.ActionType.BYID;
                case "BYRESTAURANTID":
                    return ActionType.BYRESTAURANTID;
                default:
                    return null;
            }
        }
    }

    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** Item Saved ***" + new Gson().toJson(this));
    }

    public static DB_Items fetchItemByID(String itemId){
        return (itemId == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_Items.class, itemId);

    }

    public static List<DB_Items> fetchItemsByRestaurantID(String restaurantId) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantId", new AttributeValue().withS(restaurantId));
        DynamoDBQueryExpression<DB_Items> queryExpression = new DynamoDBQueryExpression<DB_Items>()
                .withIndexName("restaurantId-index")
                .withKeyConditionExpression("restaurantId = :restaurantId")
                .withExpressionAttributeValues(expressionAttributeValues).withConsistentRead(false);
        return AWSCredentials.dynamoDBMapper().query(DB_Items.class, queryExpression);
    }

    public static List<DB_Items> fetchItemsByRestaurantIDAndCategory(String restaurantId, String category) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantId", new AttributeValue().withS(restaurantId));
        expressionAttributeValues.put(":category", new AttributeValue().withS(category));

        DynamoDBQueryExpression<DB_Items> queryExpression = new DynamoDBQueryExpression<DB_Items>()
                .withIndexName("restaurantId-category-index")
                .withKeyConditionExpression("restaurantId = :restaurantId and category = :category")
//                .withFilterExpression("category = :category")
                .withExpressionAttributeValues(expressionAttributeValues)
                .withConsistentRead(false);

        return AWSCredentials.dynamoDBMapper().query(DB_Items.class, queryExpression);
    }

    public static List<DB_Items> fetchItemsByRestaurantIDAndTag(String restaurantId, String tag) {
        if (restaurantId == null || tag == null) {
            throw new IllegalArgumentException("restaurantId or tag cannot be null");
        }
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantId", new AttributeValue().withS(restaurantId));
        expressionAttributeValues.put(":tag", new AttributeValue().withS(tag));

        DynamoDBQueryExpression<DB_Items> queryExpression = new DynamoDBQueryExpression<DB_Items>()
                .withIndexName("restaurantId-tag-index")
                .withKeyConditionExpression("restaurantId = :restaurantId and tag=:tag")
//                .withFilterExpression("tag = :tag")
                .withExpressionAttributeValues(expressionAttributeValues)
                .withConsistentRead(false);


        return AWSCredentials.dynamoDBMapper().query(DB_Items.class, queryExpression);
    }

}