package org.turbofinn.dbmappers;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.google.gson.Gson;
import lombok.*;
import org.turbofinn.aws.AWSCredentials;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@DynamoDBTable(tableName = "Payments")
public class DB_Payments extends DB_DateTable{

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    String paymentId;
    String restaurantId;
    String orderId;
    String tableNo;
    String paymentStatus;
    double paymentAmount;
    String paymentDate;
    String userId;

    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** Payment Saved *** " + new Gson().toJson(this));
    }

    public static DB_Payments fetchPaymentByID(String paymentId){
        return (paymentId == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_Payments.class, paymentId);
    }

    public static List<DB_Payments> fetchPaymentsByRestaurantID(String restaurantId) {
        HashMap<String, AttributeValue> expressionAttributeValues = new HashMap<>();
        expressionAttributeValues.put(":restaurantId", new AttributeValue().withS(restaurantId));
        DynamoDBQueryExpression<DB_Payments> queryExpression = new DynamoDBQueryExpression<DB_Payments>()
                .withIndexName("restaurantId-index")
                .withKeyConditionExpression("restaurantId = :restaurantId")
                .withExpressionAttributeValues(expressionAttributeValues).withConsistentRead(false);
        return AWSCredentials.dynamoDBMapper().query(DB_Payments.class, queryExpression);
    }
}
