package org.turbofinn.dbmappers;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.google.gson.Gson;
import lombok.*;
import org.turbofinn.aws.AWSCredentials;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@DynamoDBTable(tableName = "Offers")
public class DB_Offers extends DB_DateTable{

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    String offerId;
    String offerName;
    String details;
    String startDate;
    String endDate;
    String referenceId;
    String restaurantId;
    String image;
    String isDeleted = "false";

    public static enum ActionType {
        CREATE("CREATE"),
        UPDATE("UPDATE"),
        DELETE("DELETE"),
        FETCH("FETCH");
        private String text;

        private ActionType(String text) {
            this.text = text;
        }

        @Override
        public String toString() {
            return this.text;
        }

        public static DB_Offers.ActionType getActionType(String type) {
            if (type == null) {
                return null;
            }
            switch (type) {
                case "CREATE":
                    return DB_Offers.ActionType.CREATE;
                case "UPDATE":
                    return DB_Offers.ActionType.UPDATE;
                case "DELETE":
                    return DB_Offers.ActionType.DELETE;
                case "FETCH":
                    return DB_Offers.ActionType.FETCH;
                default:
                    return null;
            }
        }
    }

    public void save() {
        AWSCredentials.dynamoDBMapper().save(this);
        System.out.println("*** Offer Saved ***" + new Gson().toJson(this));
    }

    public static DB_Offers fetchOfferByID(String offerId){
        return (offerId == null) ? null : AWSCredentials.dynamoDBMapper().load(DB_Offers.class, offerId);
    }

}
